---
// PDFViewer.astro - A flipbook PDF viewer component
const { pdfPath } = Astro.props;
---

<div class="pdf-viewer-container">
    <div id="pdf-flipbook" class="pdf-flipbook"></div>
    
    <div class="pdf-controls">
        <button id="prev-button" class="control-button">Previous</button>
        <span id="page-info">Page <span id="current-page">1</span> of <span id="total-pages">0</span></span>
        <button id="next-button" class="control-button">Next</button>
    </div>
</div>

<script define:vars={{ pdfPath }}>
// Import PDF.js library
import * as pdfjs from 'https://cdn.jsdelivr.net/npm/pdfjs-dist@3.11.174/+esm';
// Set the worker source
pdfjs.GlobalWorkerOptions.workerSrc = 'https://cdn.jsdelivr.net/npm/pdfjs-dist@3.11.174/build/pdf.worker.min.js';

document.addEventListener('DOMContentLoaded', async () => {
    const container = document.getElementById('pdf-flipbook');
    const prevButton = document.getElementById('prev-button');
    const nextButton = document.getElementById('next-button');
    const currentPageElement = document.getElementById('current-page');
    const totalPagesElement = document.getElementById('total-pages');
    
    let currentPage = 1;
    let totalPages = 0;
    let pdfDocument = null;
    
    try {
        // Load the PDF document
        pdfDocument = await pdfjs.getDocument(pdfPath).promise;
        totalPages = pdfDocument.numPages;
        totalPagesElement.textContent = totalPages.toString();
        
        // Render first page
        renderPage(currentPage);
        
        // Set up button event handlers
        prevButton.addEventListener('click', () => {
            if (currentPage > 1) {
                currentPage--;
                renderPage(currentPage);
            }
        });
        
        nextButton.addEventListener('click', () => {
            if (currentPage < totalPages) {
                currentPage++;
                renderPage(currentPage);
            }
        });
        
        // Add keyboard navigation
        document.addEventListener('keydown', (event) => {
            if (event.key === 'ArrowLeft' && currentPage > 1) {
                currentPage--;
                renderPage(currentPage);
            } else if (event.key === 'ArrowRight' && currentPage < totalPages) {
                currentPage++;
                renderPage(currentPage);
            }
        });
        
    } catch (error) {
        console.error('Error loading PDF:', error);
        container.innerHTML = `<div class="error-message">Error loading PDF. Please try again or <a href="${pdfPath}" target="_blank">open directly</a>.</div>`;
    }
    
    async function renderPage(pageNumber) {
        try {
            // Clear container
            container.innerHTML = '';
            
            // Get the page
            const page = await pdfDocument.getPage(pageNumber);
            
            // Create a canvas for the page
            const canvas = document.createElement('canvas');
            container.appendChild(canvas);
            
            // Calculate scale to fit the container width
            const viewport = page.getViewport({ scale: 1 });
            const containerWidth = container.clientWidth;
            const scale = containerWidth / viewport.width;
            const scaledViewport = page.getViewport({ scale });
            
            // Set canvas dimensions
            canvas.width = scaledViewport.width;
            canvas.height = scaledViewport.height;
            
            // Render the page
            const renderContext = {
                canvasContext: canvas.getContext('2d'),
                viewport: scaledViewport
            };
            
            await page.render(renderContext).promise;
            
            // Update page info
            currentPageElement.textContent = pageNumber.toString();
            
            // Update button states
            prevButton.disabled = pageNumber <= 1;
            nextButton.disabled = pageNumber >= totalPages;
            
        } catch (error) {
            console.error('Error rendering page:', error);
            container.innerHTML = `<div class="error-message">Error rendering page ${pageNumber}.</div>`;
        }
    }
});
</script>

<style>
    .pdf-viewer-container {
        width: 100%;
        max-width: 1000px;
        margin: 0 auto;
        display: flex;
        flex-direction: column;
    }
    
    .pdf-flipbook {
        border: 1px solid #ddd;
        background-color: #f5f5f5;
        min-height: 500px;
        display: flex;
        justify-content: center;
        align-items: center;
        position: relative;
        overflow: hidden;
    }
    
    .pdf-flipbook canvas {
        max-width: 100%;
        height: auto;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
    }
    
    .pdf-controls {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px 0;
        background-color: #fff;
        border: 1px solid #ddd;
        border-top: none;
    }
    
    .control-button {
        padding: 8px 15px;
        background-color: #0077cc;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: bold;
    }
    
    .control-button:disabled {
        background-color: #ccc;
        cursor: not-allowed;
    }
    
    .control-button:hover:not(:disabled) {
        background-color: #005fa3;
    }
    
    #page-info {
        font-size: 16px;
    }
    
    .error-message {
        padding: 20px;
        color: #721c24;
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        border-radius: 4px;
    }
</style>
